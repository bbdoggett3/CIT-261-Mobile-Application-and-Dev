<!-- AUTHORS: Ben Doggett & Charles
	Team Activity W02 -->

<!DOCTYPE html>
<html>
<head>
	<title>Team Activity Week 2</title>
	<script>
		//REQUIREMENT 1
		function req1() {
			const input = document.getElementById("req1_text").value;
			const output = document.getElementById("output1");
			output.innerHTML = input;

		}

		//REQURIEMENT 2
		function req2() {
			const input = document.getElementById("req2_text").value;
			const output = document.getElementById("output2");
			const inputInt = parseInt(input)
			if (inputInt !== NaN) {       //NOT FINISHED?
				output.innerHTML = "total will =" + numberSum(inputInt);
			}
		}

		//REQUREMENT 2 SUM
		function numberSum(n) {
  			let total = 0;
    			for(let i = 1; i <= n; i++) {
     		 total += i;
    	}
    		return total;
	}

		//REQUIREMENT 3
		function req3() {
			const num1 = document.getElementById("req3_num1").value;
			const num2 = document.getElementById("req3_num2").value;
			const output = document.getElementById("output3");

			const float1 = parseFloat(num1);
			const float2 = parseFloat(num2);

			if ((float1 !== NaN) & (float2 !== NaN)) {       //NOT FINISHED?
				const total = float1 + float2;
				output.innerHTML = "Total = " + total;

			}
		}
		// stretch solution
                function getNum(numId) {
                      const number = document.getElementById(numId).value;
                      const numberFloat = parseFloat(number);
                      if (numberFloat !== NaN) {
                              return numberFloat;
                        } else return 0;
                 }
		 
                 function updateTotal(value) {
                      const outputElement = document.getElementById('stretchOutput');
                      outputElement.innerHTML = 'Total: ' + value;
                }
		
              // function declaration
      
                 function add2(num1, num2) {
                       return num1 + num2;
                }
		
             // function expression
                      const sub2 = function(num1, num2) {
                      return num1 - num2;
               };
	       
            // arrow function
      
              const mult2 = (num1, num2) => num1 * num2;

            // example of using a callback to pull it all together
	    
               function performOperation(operation) {
           // the argument 'operation' is a function...so when we are ready we can call that function in our code below
                     const total = operation(
                     getNum('stretchNumber1'),
                     getNum('stretchNumber2')
               );
                  updateTotal(total);
               }	
	</script>
	
</head>
<body>
	<!--REQUIREMENT 1 -->
	<input id="req1_text" type="text" placeholder="put text">
	<button onclick="req1()">Click</button>
	<div id="output1"></div>

	<!--REQUIREMENT 2-->
	<input id="req2_text" type="text" placeholder="number">
	<button onclick="req2()">Click</button>
	<div id="output2"></div>

	<!--REQUIREMENT 3 -->
	<input id="req3_num1" type="number" placeholder="number">
	<input id="req3_num2" type="number" placeholder="number">
	<button onclick="req3()">+</button>
	<div id="output3"></div>
	
	 <h2>Stretch</h2>
         <input id="stretchNumber1" placeholder="enter a number" type="number"></input>
         <input id="stretchNumber2" placeholder="enter a number" type="number"></input>
    <!-- Notice below that all of our buttons are calling the same function...but passing in the name of another function as the argument. Notice also what is missing...when you pass a function as a callback you DO NOT include the ()! If you add the () the function will get executed immediately instead of later like we would like. -->
        
	<button id="stretchAdd" onclick="performOperation(add2)">+</button>
        <button id="stretchSub" onclick="performOperation(sub2)">-</button>
        <button id="stretchMult" onclick="performOperation(mult2)">*</button>
	
        <div id="stretchOutput"></div>
	
	


</body>
</html>
