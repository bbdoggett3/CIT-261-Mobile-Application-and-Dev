W04 Reading Notes

Chapter 8 Forms:
Be careful referencing elements in this way, however. If the form had the same name as any properties or methods of the document.forms object, such as 'submit', for example, that property or method would be referenced instead of the <form> element. This is unlikely to happen, as the document.form object doesn't have many properties or methods, but it is something to be aware of. To avoid this, square bracket notation can be used (this is also required if the form’s name attribute contains any invalid characters, such as spaces or dashes):
const form = document.forms['search'];

The focus event occurs when an element is focused on. In the case of an <input> element, this is when the cursor is placed inside the element (either by clicking or tapping on it or navigating to it using the keyboard). To see an example, add the following code to main.js :
This is some practice that you can do Ben in order to see how this concept really works.
const input = form.elements.searchInput;
input.addEventListener('focus', () => alert('focused'), false);

input.value = 'Search Here';
Now refresh the page and you should see that the string 'Search Here' is displayed in the input field.
The problem with this is that the text remains in the field when the user clicks inside it, so it has to be deleted before the user can enter their own text. This is easily remedied using the focus and blur event handlers. Add the following to main.js :
input.addEventListener('focus', function(){
    if (input.value==='Search Here') {
        input.value = '' 
    }
}, false);
input.addEventListener('blur', function(){
    if(input.value === '') {
        input.value = 'Search Here';
    } }, false);

A better approach that I like to use is the placeholder, they both have their own benefits…
Similar functionality can be produced in modern browsers using the placeholder attribute in the HTML markup. Simply change the input field to the following in search.html :
<input type='text' name='search-box' placeholder='Search Here'>
This has slightly different behavior in that the placeholder text is not actually a value of the input field, so it won’t be submitted as the field’s value if the user fails to fill it in.

Common Form Controls to use:

Some common types of form control are:

•	 <input> fields, including text, passwords, check boxes, radio buttons, and file uploads
•	 <select> menus for drop-down lists of options
•	 <textarea> elements for longer text entry
•	 <button> elements for submitting and resetting forms

I will include below some examples to these types of form control below…
Input Fields:
Text input:
The initial value of this field can be set in the HTML using the value attribute. For example, you could pre-fill the 'recommended' donation on a charity page like so:
<label for='donation-amount'>Enter amount to donate: 
    <input type='text' id ='donation-amount' name='donationAmount' value='10'>
</label>

Passwords: 
<label for='realName'>Real Name:
<input type='password' name='realName' id='realName'></label>

Checkbox: 
We’ll use checkboxes to add a list of powers that the superhero can have. Add the following lines of code to the form in hero.html :

<p>Super Powers:</p>
<label for='flight'>Flight:
    <input type='checkbox' id='flight' value='Flight' name='powers'>
</label>
<label for='strength'>Super Strength:
    <input type='checkbox' id='strength' value='Strength' name='powers'>
</label>
Notice that all the checkbox elements have the same 'name' property of 'powers'. This means they can be accessed as an HTML collection.
Radio Button: 
<p>What type of hero are you?</p>
<label for='hero'>Hero:
    <input type='radio' name='category' value='Hero' id='hero'>
</label>
<label for='villain'>Villain:
    <input type='radio' name='category' value='Villain' id='villain'>
</label>

There are also Hidden input fields created with the type=”hidden” or type=”file” or type=”number” or type=”tel” (for the telephone) and another is type=”color”
Select Fields

Select:
 Select drop-down lists can be used to select one or more options from a list of values. The 'multiple' attribute is required if more than one option is to be selected. We’ll use one in our example to choose the city where our hero operates. Add the following line of code to the form in hero.html :
<label for='City'>Base of Operations:
    <select name='city' id='city'>
        <option value='' selected>Choose a City</option>
        <option value='Metropolis'>Metropolis</option>
        <option value='Gotham City'>Gotham City</option>
        <option value='Keystone City'>Keystone City</option>
        <option value='Coast City'>Coast City</option>
        <option value='Star City'>Star City</option>
    </select>
</label>

Text Area:
A <textarea> element is used to enter long pieces of text over multiple lines such as a comment or blog post. They work in much the same way as input fields. We access them using the 'name' attribute, and use the value property to see what text was entered.
For example, we can add a text area to our form so the origin story of our superhero can be entered. Add the following lines of code to the form in hero.html :
<label for='origin'>Origin Story:
    <textarea id='origin' name='origin' rows='20' cols='60'></textarea>
</label>

Button: 
The other type is simply 'button'. This doesn’t need to be inside a form element and has no default behavior. It simply creates a clickable button that can have an event listener attached to it:
<button type='button'>Click Me</button>

Form Validation
It is also possible to implement custom form validation using JavaScript. For example, say we wanted to exclude any superhero names that begin with an 'X'. This is not a standard form of validation, so we’d have to write our own. Add this code to main.js to see an example of custom validation:
form.addEventListener('submit',validate,false);
function validate(event) {
    const firstLetter = form.heroName.value[0];
    if (firstLetter.toUpperCase() === 'X') {
        event.preventDefault();
        alert('Your name is not allowed to start with X!');
    }
}

There is another way to do this validation during the process with Javascript or HTML… here is an example from the reading in Javascript.

Chapter 11 Object Oriented Programming 

There are three main concepts in OOP: encapsulation, polymorphism and inheritance.

Encapsulation
When I use my juicer, I put the fruit into the machine, press the 'on' button and out comes the juice. I haven’t a clue how it does it—only that it makes a very loud noise! This demonstrates the concept of encapsulation: the inner workings are kept hidden inside the object and only the essential functionalities are exposed to the end user, such as the 'on' button. In OOP, this involves keeping all the programming logic inside an object and making methods available to implement the functionality, without the outside world needing to knowhowit’s done.

Polymorphism
My juicer isn't the only appliance I own that has an 'on' button, although the way the on button works is slightly different for each appliance. My juicer also uses the same electrical outlet as other appliances in my kitchen. I can also place various types of fruit into it and it still juices them. These examples demonstrate the concept of polymorphism: the same process can be used for different objects. In OOP, this means various objects can share the same method, but also have the ability to override shared methods with a more specific implementation.

Inheritance
I’d really like the next model up from my juicer, as it can deal with more types of fruit and it’s a bit quieter. Even though it has these extra features, I’m sure that inside it uses many of the same parts that my juicer has. This demonstrates the concept of inheritance: taking the features of one object then adding some new features. In OOP, this means we can take an object that already exists and inherit all its properties and methods. We can then improve on its functionality by adding new properties and methods.

Chapter 15 Modular JavaScript

Modular JavaScript:
A module is a self-contained piece of code that provides functions and methods that can then be used in other files and by other modules. This helps to keep code organized in separate, reusable files, which improves code maintainability. The code in a module should have a single purpose, and group together functions with distinct functionality.
The coupling of code refers to how dependent certain elements or modules of code are on each other. 
