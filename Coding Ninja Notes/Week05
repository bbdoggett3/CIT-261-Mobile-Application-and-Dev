W05 Reading Notes Coding Ninja
CH. 10 Testing and Debugging
Errors are caused when something goes wrong in a program. They are usually caused by one of the following:
•	System error ― there’s a problem with the system or external devices with which the program is interacting.
•	Programmer error ― the program contains incorrect syntax or faulty logic; it could even be as simple as a typo.
•	User error ― the user has entered data incorrectly, which the program is unable to handle.

Exceptions: “An exception is an error that produces a return value that can then be used by the program to deal with the error.”
 Warnings: An example of a mistake that could cause a warning is assigning a value to a variable that’s undeclared:
pi = 3.142;
<< JavaScript Warning: assignment to undeclared variable

For this reason, a ninja programmer should ensure that the code they write fails loudly in development so any errors can be identified and fixed quickly.
Strict Mode:
ECMAScript 5 introduced a strict mode that produces more exceptions and warnings and prohibits the use of some deprecated features.
Strict mode simply requires the following string to be added to the first line of a JavaScript file: 
'use strict';
'use strict';
e = 2.718;
<< ReferenceError: e is not defined
You can even use strict mode on a per-function basis by adding the line inside a function. Strict mode will then only be applied to anything inside that function:
function strictly(){
'use strict';
// function code goes here
In fact, the recommended way to invoke strict mode is to place all your code into a self-invoking function (covered in more detail in Chapter 12), like so:
(function() {
    'use strict';
    // All your code would go inside this function
}());
Placing 'use strict' at the beginning of a file will enforce strict mode on all the JavaScript in the file.

DEBUGGING:
Trusty Alert: The most basic form of debugging is to use the alert() method to show a dialog at certain points in the code.
Console: We've already seen and used the console.log() method. This can be used to log the value of variables at different stages of the program, although it will not actually stop the execution of the program in the same way as alert() does.
Debugger: One of the most useful commands is the debugger keyword. This will create a breakpoint in your code that will pause the execution of the code and allow you to see where the program is currently up to.
TESTS
In your code it is important to always run tests. 
A test can simply be a function that tests a piece of code runs as it should. For example, we could test that the squareRoot() function that we wrote earlier returns the correct answer with the following function:
function itSquareRoots4() {
    return squareRoot(4) === 2;
}

JEST 
Is used by facebook,
To use Jest, first we need to install it using npm . Enter the following command in a terminal:
npm install -g jest
This should install Jest globally. To check everything worked okay, try running the following command to check the version number that has been installed:
jest -v
<< v19.0.2
The version number might be different on your install, but if it returns a value, it means Jest is installed correctly.
Next we'll create an example test to see if it works. Let's write a test to see if our squareRoot() function from earlier works. Create a file called squareRoot.test.js and add the following code:
function squareRoot(number) {
    'use strict';
    if (number < 0) {
        throw new RangeError("You can't find the square root of negative numbers")
    }
    return Math.sqrt(number);
};
test('square root of 4 is 2', () => {
expect(squareRoot(4)).toBe(2);
});
